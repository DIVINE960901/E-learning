<template>
  <div>
    <button @click="changeView('view1')">显示视图1</button>
    <button @click="changeView('view2')">显示视图2</button>

    <!-- 根据currentView的值动态切换内容 -->
    <component :is="currentView"></component>
  </div>
</template>

<script>
import View1 from './View1.vue';
import View2 from './View2.vue';

export default {
  data() {
    return {
      currentView: 'View1', // 初始时显示视图1
    };
  },
  components: {
    View1,
    View2,
  },
  methods: {
    changeView(viewName) {
      this.currentView = viewName;
    },
  },
};
</script>
<el-form-item label="上传视频">
  <el-upload
      :on-success="handleVodUploadSuccess"
      :on-remove="handleVodRemove"
      :before-remove="beforeVodRemove"
      :on-exceed="handleUploadExceed"
      :file-list="fileList"
      :action="BASE_API+'/vodService/video/uploadVideoAly'"
      :limit="1"
      class="upload-demo">
  <el-button size="small" type="primary">上传视频</el-button>
  <el-tooltip placement="right-end">
      <div slot="content">最大支持1G，<br>
          支持3GP、ASF、AVI、DAT、DV、FLV、F4V、<br>
          GIF、M2T、M4V、MJ2、MJPEG、MKV、MOV、MP4、<br>
          MPE、MPG、MPEG、MTS、OGG、QT、RM、RMVB、<br>
          SWF、TS、VOB、WMV、WEBM 等视频格式上传</div>
      <i class="el-icon-question"/>
  </el-tooltip>
  </el-upload>
</el-form-item>
fileList: [],//上传文件列表
BASE_API: process.env.BASE_API // 接口API地址
video: {// 课时对象
    title: '',
    sort: 0,
    isFree: 0,
    videoSourceId: '',
    videoOriginalName:''
}
handleUploadExceed(file,fileList){
  this.$message.warning('想要重新上传视频,请先删除已经上传的视频')
},
//点击确定调用的方法
handleVodRemove(){
  video.removeAlyVideo(this.video.videoSourceId).then(response=>{
      this.$message({
          type:'success',
          message:'删除视频成功!' 
      }) 
      //把文件列表清空
      this.fileList = []
      //删除的视频信息不再存入数据库
      this.video.videoSourceId = ''
      this.video.videoOriginalName = ''
  })
          
},
//点击×调用的方法
beforeVodRemove(file,fileList){
  return this.$confirm(`确定移除 ${file.name}?`)
},
//上传成功方法
handleVodUploadSuccess(response,file,fileList){
  this.video.videoSourceId = response.data.videoId
  this.video.videoOriginalName = file.name
}

application.yml
#服务端口
server:
  port: 8003

#服务名
spring:
  application:
    name: service-vod

  #环境设置:dev,test,prod
  profiles:
    active: dev


  servlet:
    multipart:
      max-file-size: 1024MB # 最大上传单个文件大小：默认1M
      max-request-size: 1024MB # 最大置总上传的数据大小 ：默认10M

#阿里云VOD地址
aliyun:
  vod:
    file:
      keyid: your keyId #LLTAI5tB1EoaQ238YqkeDSPhU
      keysecret: your keySecret #YAdJ39zrKMCnaTNN5yyPSKbanyhbHt
pojo
@Component //把属性的设置交给Spring.
public class ConstantPropertiesUtil implements InitializingBean {// InitializingBean:在初始化的时候,该类被执行.

    //从配置文件中读取值,赋值给这些属性
    //注意@value无法给静态属性注入值
    @Value("${aliyun.vod.file.keyid}")
    private String keyId;

    @Value("${aliyun.vod.file.keysecret}")
    private String keySecret;

    //定义公开静态方法
    public static String ACCESS_KEY_ID;
    public static String ACCESS_KEY_SECRET;

    //当属性值设置完毕后执行该方法.
    @Override
    public void afterPropertiesSet() throws Exception {
        ACCESS_KEY_ID = keyId;
        ACCESS_KEY_SECRET = keySecret;
    }
}
controller
@RestController
@RequestMapping("/vodService/video")
@CrossOrigin
public class VodController {

    @Autowired
    private VodService vodService;

    //上传视频到阿里云VOD
    @PostMapping("uploadVideoAly")
    public R uploadVideoAly(@RequestBody MultipartFile file){
        String videoId = vodService.uploadVideoAly(file);
        return R.ok().data("videoId",videoId);
    }

    //根据视频id从阿里云删除视频
    @DeleteMapping("removeAlyVideo/{id}")
    public R removeAlyVideo(@PathVariable String id){
        vodService.removeAlyVideo(id);
        return R.ok();
    }
}
service
@Service
public class VodServiceImpl implements VodService {
    //上传视频到阿里云VOD
    @Override
    public String uploadVideoAly(MultipartFile file) {

        String accessKeyId = ConstantPropertiesUtil.ACCESS_KEY_ID;
        String accessKeySecret = ConstantPropertiesUtil.ACCESS_KEY_SECRET;
        String title = file.getOriginalFilename().substring(0,file.getOriginalFilename().lastIndexOf("."));//上传之后显示名称
        String fileName = file.getOriginalFilename();//上传文件原始名称
        try {
            InputStream inputStream = file.getInputStream();//上传文件流
            UploadStreamRequest request = new UploadStreamRequest(accessKeyId, accessKeySecret, title, fileName, inputStream);

            UploadVideoImpl uploader = new UploadVideoImpl();
            UploadStreamResponse response = uploader.uploadStream(request);
            String videoId = response.getVideoId();
            return videoId;
        } catch (Exception e) {
            e.printStackTrace();
            throw new GuLiException(20001, "文件上传失败!");
        }
    }

    //根据id删除阿里云上的视频
    @Override
    public void removeAlyVideo(String id) {
        try {
            DefaultAcsClient client = InitVodClient.initVodClient(ConstantPropertiesUtil.ACCESS_KEY_ID, ConstantPropertiesUtil.ACCESS_KEY_SECRET);
            //
            DeleteVideoRequest request = new DeleteVideoRequest();
            DeleteVideoResponse response = new DeleteVideoResponse();
            //想request中设置视频id
            request.setVideoIds(id);
            response = client.getAcsResponse(request);
        } catch (ClientException e) {
            e.printStackTrace();
            throw new GuLiException(20001, "视频删除失败!");
        }
    }
}
